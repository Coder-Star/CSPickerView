// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CSPickerView
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@objc public protocol PickerViewDelegate {
  @objc func singleColDidSelecte(_ selectedIndex: Swift.Int, selectedValue: Swift.String)
  @objc func multipleColsDidSelecte(_ selectedIndexs: [Swift.Int], selectedValues: [Swift.String])
  @objc func dateDidSelecte(_ selectedDate: Foundation.Date)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DatePickerSetting : ObjectiveC.NSObject {
  @objc public var date: Foundation.Date
  @objc public var dateMode: UIKit.UIDatePicker.Mode
  @objc public var minimumDate: Foundation.Date?
  @objc public var maximumDate: Foundation.Date?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PickerStyles : Swift.Int {
  case single
  case multiple
  case multipleAssociated
  case date
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CityPickStyle : Swift.Int {
  case province
  case city
  case area
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class PickerView : UIKit.UIView {
  public typealias BtnAction = () -> Swift.Void
  public typealias SingleDoneAction = (_ selectedIndex: Swift.Int, _ selectedValue: Swift.String) -> Swift.Void
  public typealias MultipleDoneAction = (_ selectedIndexs: [Swift.Int], _ selectedValues: [Swift.String]) -> Swift.Void
  public typealias DateDoneAction = (_ selectedDate: Foundation.Date) -> Swift.Void
  public typealias MultipleAssociatedDataType = [[[Swift.String : [Swift.String]?]]]
  @objc @_Concurrency.MainActor(unsafe) public init(pickerStyle: CSPickerView.PickerStyles)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension CSPickerView.PickerView : UIKit.UIPickerViewDelegate, UIKit.UIPickerViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc final public func pickerView(_ pickerView: UIKit.UIPickerView, viewForRow row: Swift.Int, forComponent component: Swift.Int, reusing view: UIKit.UIView?) -> UIKit.UIView
}
extension CSPickerView.PickerView {
  @_Concurrency.MainActor(unsafe) public class func singleColPicker(_ toolBarTitle: Swift.String, singleColData: [Swift.String], defaultIndex: Swift.Int?, cancelAction: CSPickerView.PickerView.BtnAction?, sureAction: CSPickerView.PickerView.SingleDoneAction?) -> CSPickerView.PickerView
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func multipleCosPicker(_ toolBarTitle: Swift.String, multipleColsData: [[Swift.String]], defaultSelectedIndexs: [Swift.Int]?, cancelAction: CSPickerView.PickerView.BtnAction?, doneAction: CSPickerView.PickerView.MultipleDoneAction?) -> CSPickerView.PickerView
  @_Concurrency.MainActor(unsafe) public class func multipleAssociatedCosPicker(_ toolBarTitle: Swift.String, multipleAssociatedColsData: CSPickerView.PickerView.MultipleAssociatedDataType, defaultSelectedValues: [Swift.String]?, cancelAction: CSPickerView.PickerView.BtnAction?, doneAction: CSPickerView.PickerView.MultipleDoneAction?) -> CSPickerView.PickerView
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func citiesPicker(_ toolBarTitle: Swift.String, type: CSPickerView.CityPickStyle, defaultSelectedValues: [Swift.String]?, cancelAction: CSPickerView.PickerView.BtnAction?, doneAction: CSPickerView.PickerView.MultipleDoneAction?) -> CSPickerView.PickerView
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func datePicker(_ toolBarTitle: Swift.String, datePickerSetting: CSPickerView.DatePickerSetting, cancelAction: CSPickerView.PickerView.BtnAction?, doneAction: CSPickerView.PickerView.DateDoneAction?) -> CSPickerView.PickerView
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PickerViewUtils : ObjectiveC.NSObject {
  @objc public static var resoureBundle: Foundation.Bundle? {
    @objc get
  }
  @objc public static var addressPlistPath: Swift.String? {
    @objc get
  }
  @objc public static func localizedString(key: Swift.String, defaultValue: Swift.String? = nil) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension CSPickerView.PickerViewUtils {
  @objc public static func formatDate(date: Foundation.Date, formatStr: Swift.String) -> Swift.String
  @objc public static func toDate(dateStr: Swift.String?, dateTypeStr: Swift.String) -> Foundation.Date?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class SelectPickerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var titleArr: [Swift.String] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var cancelAction: CSPickerView.PickerViewManager.BtnAction?
  @objc @_Concurrency.MainActor(unsafe) public var sureAction: CSPickerView.PickerViewManager.MultipleDoneAction?
  @objc @_Concurrency.MainActor(unsafe) public var singleSureAction: CSPickerView.PickerViewManager.SingleDoneAction?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension CSPickerView.SelectPickerView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showView(title: Swift.String, data: [Swift.String], defaultSelectedIndexs: [Swift.Int]?, cancelAction: @escaping CSPickerView.PickerViewManager.BtnAction, sureAction: @escaping CSPickerView.PickerViewManager.MultipleDoneAction)
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func getView(title: Swift.String, data: [Swift.String], defaultSelectedIndexs: [Swift.Int]?) -> CSPickerView.SelectPickerView?
  @_Concurrency.MainActor(unsafe) public class func showSingleView(title: Swift.String, data: [Swift.String], defaultSelectedIndex: Swift.Int?, cancelAction: @escaping CSPickerView.PickerViewManager.BtnAction, sureAction: @escaping CSPickerView.PickerViewManager.SingleDoneAction)
  @_Concurrency.MainActor(unsafe) public class func getSingleView(title: Swift.String, data: [Swift.String], defaultSelectedIndex: Swift.Int?) -> CSPickerView.SelectPickerView?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func show(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func dismiss(completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
extension CSPickerView.SelectPickerView : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension CSPickerView.SelectPickerView : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ToolBarView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) open var title: Swift.String {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var sureAction: CSPickerView.PickerViewManager.BtnAction?
  @objc @_Concurrency.MainActor(unsafe) open var cancelAction: CSPickerView.PickerViewManager.BtnAction?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc public enum DurationDatePickerViewDateType : Swift.Int {
  case YMD
  case YMDHM
  public var formatStr: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class DurationDatePickerView : UIKit.UIView {
  public typealias SureBlock = (_ startDate: Swift.String, _ endDate: Swift.String) -> Swift.Void
  public typealias CancelBlock = () -> Swift.Void
  @objc @_Concurrency.MainActor(unsafe) public var canGreatNow: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var canLessNow: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var sureBlock: CSPickerView.DurationDatePickerView.SureBlock?
  @objc @_Concurrency.MainActor(unsafe) public var cancelBlock: CSPickerView.DurationDatePickerView.CancelBlock?
  @objc @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var startBtn: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var endBtn: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var cancelBtn: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var confirmBtn: UIKit.UIButton {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension CSPickerView.DurationDatePickerView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func getPopupView(startDate: Foundation.Date, endDate: Foundation.Date, dateType: CSPickerView.DurationDatePickerViewDateType = .YMD) -> CSPickerView.DurationDatePickerView
  @objc @_Concurrency.MainActor(unsafe) dynamic public func show(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func dismiss(completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class PickerViewConfig : ObjectiveC.NSObject {
  @objc public static let shared: CSPickerView.PickerViewConfig
  @objc public var mainBackgroundColor: UIKit.UIColor
  @objc public var maskColor: UIKit.UIColor
  @objc public var mainTextColor: UIKit.UIColor
  @objc public var leftButtonColor: UIKit.UIColor
  @objc public var leftButtonFont: UIKit.UIFont
  @objc public var rightButtonColor: UIKit.UIColor
  @objc public var rightButtonFont: UIKit.UIFont
  @objc public var centerLabelColor: UIKit.UIColor
  @objc public var centerLabelFont: UIKit.UIFont
  @objc public var itemLabelFont: UIKit.UIFont
  @objc public var itemLabelColor: UIKit.UIColor
  @objc public var toolBarViewTopCornerRadius: CoreFoundation.CGFloat
  @objc public var lineColor: UIKit.UIColor
  @objc public var languageCode: Swift.String?
  @objc public var animateDuration: Swift.Double
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class PickerViewManager : UIKit.UIView {
  public typealias BtnAction = () -> Swift.Void
  public typealias SingleDoneAction = (_ selectedIndex: Swift.Int, _ selectedValue: Swift.String) -> Swift.Void
  public typealias MultipleDoneAction = (_ selectedIndexs: [Swift.Int], _ selectedValues: [Swift.String]) -> Swift.Void
  public typealias DateDoneAction = (_ selectedDate: Foundation.Date) -> Swift.Void
  public typealias MultipleAssociatedDataType = [[[Swift.String : [Swift.String]?]]]
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension CSPickerView.PickerViewManager {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func dimiss(completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
extension CSPickerView.PickerViewManager {
  @_Concurrency.MainActor(unsafe) public class func showSingleColPicker(_ toolBarTitle: Swift.String, data: [Swift.String], defaultSelectedIndex: Swift.Int?, cancelAction: CSPickerView.PickerViewManager.BtnAction?, sureAction: CSPickerView.PickerViewManager.SingleDoneAction?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showMultipleColsPicker(_ toolBarTitle: Swift.String, data: [[Swift.String]], defaultSelectedIndexs: [Swift.Int]?, cancelAction: CSPickerView.PickerViewManager.BtnAction?, sureAction: CSPickerView.PickerViewManager.MultipleDoneAction?)
  @_Concurrency.MainActor(unsafe) public class func showMultipleAssociatedColsPicker(_ toolBarTitle: Swift.String, data: CSPickerView.PickerViewManager.MultipleAssociatedDataType, defaultSelectedValues: [Swift.String]?, cancelAction: CSPickerView.PickerViewManager.BtnAction?, sureAction: CSPickerView.PickerViewManager.MultipleDoneAction?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showCitiesPicker(_ toolBarTitle: Swift.String, type: CSPickerView.CityPickStyle = .province, defaultSelectedValues: [Swift.String]?, cancelAction: CSPickerView.PickerViewManager.BtnAction?, sureAction: CSPickerView.PickerViewManager.MultipleDoneAction?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showDatePicker(_ toolBarTitle: Swift.String, datePickerSetting: CSPickerView.DatePickerSetting = DatePickerSetting(), cancelAction: CSPickerView.PickerViewManager.BtnAction?, sureAction: CSPickerView.PickerViewManager.DateDoneAction?)
}
extension CSPickerView.PickerStyles : Swift.Equatable {}
extension CSPickerView.PickerStyles : Swift.Hashable {}
extension CSPickerView.PickerStyles : Swift.RawRepresentable {}
extension CSPickerView.CityPickStyle : Swift.Equatable {}
extension CSPickerView.CityPickStyle : Swift.Hashable {}
extension CSPickerView.CityPickStyle : Swift.RawRepresentable {}
extension CSPickerView.DurationDatePickerViewDateType : Swift.Equatable {}
extension CSPickerView.DurationDatePickerViewDateType : Swift.Hashable {}
extension CSPickerView.DurationDatePickerViewDateType : Swift.RawRepresentable {}
