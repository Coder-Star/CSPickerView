#if defined(__x86_64__) && __x86_64__ || (__i386__) && __i386__ || (__arm64__) && __arm64__ || (__armv7__) && __armv7__ || (__armv7s__) && __armv7s__// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef CSPICKERVIEW_SWIFT_H
#define CSPICKERVIEW_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CSPickerView",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 城市选择样式
typedef SWIFT_ENUM(NSInteger, CityPickStyle, open) {
/// 省
  CityPickStyleProvince = 0,
/// 市
  CityPickStyleCity = 1,
/// 区
  CityPickStyleArea = 2,
};


/// 时间选择设置
SWIFT_CLASS("_TtC12CSPickerView17DatePickerSetting")
@interface DatePickerSetting : NSObject
/// 默认选中时间
@property (nonatomic, copy) NSDate * _Nonnull date;
/// 时间样式
@property (nonatomic) UIDatePickerMode dateMode;
/// 最小时间
@property (nonatomic, copy) NSDate * _Nullable minimumDate;
/// 最大时间
@property (nonatomic, copy) NSDate * _Nullable maximumDate;
/// 构造函数
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;
@class UIButton;
@class NSCoder;

/// 起止时间弹出框
SWIFT_CLASS("_TtC12CSPickerView22DurationDatePickerView")
@interface DurationDatePickerView : UIView
/// 选择日期是否可大于现在，默认true
@property (nonatomic) BOOL canGreatNow;
/// 选择日期是否可小于现在，默认true
@property (nonatomic) BOOL canLessNow;
/// 确定闭包
@property (nonatomic, copy) void (^ _Nullable sureBlock)(NSString * _Nonnull, NSString * _Nonnull);
/// 取消闭包
@property (nonatomic, copy) void (^ _Nullable cancelBlock)(void);
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
@property (nonatomic, strong) UIButton * _Nonnull startBtn;
@property (nonatomic, strong) UIButton * _Nonnull endBtn;
@property (nonatomic, strong) UIButton * _Nonnull cancelBtn;
@property (nonatomic, strong) UIButton * _Nonnull confirmBtn;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end


enum DurationDatePickerViewDateType : NSInteger;

@interface DurationDatePickerView (SWIFT_EXTENSION(CSPickerView))
/// 展示起止时间弹出框
/// \param startDate 开始时间
///
/// \param endDate 结束时间
///
/// \param dateType 时间类型
///
+ (DurationDatePickerView * _Nonnull)getPopupViewWithStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate dateType:(enum DurationDatePickerViewDateType)dateType SWIFT_WARN_UNUSED_RESULT;
/// 弹出框显示
- (void)showWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// 弹出框消失
- (void)dismissWithCompletion:(void (^ _Nullable)(BOOL))completion;
@end



/// 选择器样式
typedef SWIFT_ENUM(NSInteger, DurationDatePickerViewDateType, open) {
/// 年月日
  DurationDatePickerViewDateTypeYMD = 0,
/// 年月日时分
  DurationDatePickerViewDateTypeYMDHM = 1,
};

/// 选择器样式
typedef SWIFT_ENUM(NSInteger, PickerStyles, open) {
/// 单行
  PickerStylesSingle = 0,
/// 多行
  PickerStylesMultiple = 1,
/// 多行联动
  PickerStylesMultipleAssociated = 2,
/// 日期
  PickerStylesDate = 3,
};


SWIFT_CLASS("_TtC12CSPickerView10PickerView")
@interface PickerView : UIView
- (nonnull instancetype)initWithPickerStyle:(enum PickerStyles)pickerStyle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end



@interface PickerView (SWIFT_EXTENSION(CSPickerView))
/// 多列不关联
/// \param toolBarTitle 工具栏标题
///
/// \param multipleColsData 数据源 ~> [[String]]
///
/// \param defaultSelectedIndexs 默认选中索引
///
/// \param cancelAction 取消回调
///
/// \param doneAction 完成回调
///
///
/// returns:
/// PickerView
+ (PickerView * _Nonnull)multipleCosPicker:(NSString * _Nonnull)toolBarTitle multipleColsData:(NSArray<NSArray<NSString *> *> * _Nonnull)multipleColsData defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs cancelAction:(void (^ _Nullable)(void))cancelAction doneAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))doneAction SWIFT_WARN_UNUSED_RESULT;
/// 城市选择器
/// \param toolBarTitle 工具栏标题
///
/// \param defaultSelectedValues 默认选中值
///
/// \param cancelAction 取消回调
///
/// \param doneAction 完成回调
///
/// \param type 显示样式类型
///
///
/// returns:
/// PickerView
+ (PickerView * _Nonnull)citiesPicker:(NSString * _Nonnull)toolBarTitle type:(enum CityPickStyle)type defaultSelectedValues:(NSArray<NSString *> * _Nullable)defaultSelectedValues cancelAction:(void (^ _Nullable)(void))cancelAction doneAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))doneAction SWIFT_WARN_UNUSED_RESULT;
/// 时间选择器
/// \param toolBarTitle 工具栏标题
///
/// \param datePickerSetting date配置
///
/// \param cancelAction 取消回调
///
/// \param doneAction 完成回调
///
///
/// returns:
/// PickerView
+ (PickerView * _Nonnull)datePicker:(NSString * _Nonnull)toolBarTitle datePickerSetting:(DatePickerSetting * _Nonnull)datePickerSetting cancelAction:(void (^ _Nullable)(void))cancelAction doneAction:(void (^ _Nullable)(NSDate * _Nonnull))doneAction SWIFT_WARN_UNUSED_RESULT;
@end

@class UIPickerView;

@interface PickerView (SWIFT_EXTENSION(CSPickerView)) <UIPickerViewDataSource, UIPickerViewDelegate>
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
- (UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
@end

@class UIColor;
@class UIFont;

SWIFT_CLASS("_TtC12CSPickerView16PickerViewConfig")
@interface PickerViewConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PickerViewConfig * _Nonnull shared;)
+ (PickerViewConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 主背景色
@property (nonatomic, strong) UIColor * _Nonnull mainBackgroundColor;
/// 蒙版颜色
@property (nonatomic, strong) UIColor * _Nonnull maskColor;
/// 主文字颜色
@property (nonatomic, strong) UIColor * _Nonnull mainTextColor;
/// 左边按钮颜色
@property (nonatomic, strong) UIColor * _Nonnull leftButtonColor;
/// 左边按钮字体
@property (nonatomic, strong) UIFont * _Nonnull leftButtonFont;
/// 右边按钮颜色
@property (nonatomic, strong) UIColor * _Nonnull rightButtonColor;
/// 右边按钮字体
@property (nonatomic, strong) UIFont * _Nonnull rightButtonFont;
/// 中间标题颜色
@property (nonatomic, strong) UIColor * _Nonnull centerLabelColor;
/// 中间标题字体
@property (nonatomic, strong) UIFont * _Nonnull centerLabelFont;
/// Picker选项字体
@property (nonatomic, strong) UIFont * _Nonnull itemLabelFont;
/// Picker选项颜色
@property (nonatomic, strong) UIColor * _Nonnull itemLabelColor;
/// 顶部圆角
@property (nonatomic) CGFloat toolBarViewTopCornerRadius;
/// 分割线颜色
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// 强制使用某语言的编码
@property (nonatomic, copy) NSString * _Nullable languageCode;
/// 动画时长
@property (nonatomic) NSTimeInterval animateDuration;
@end



SWIFT_PROTOCOL("_TtP12CSPickerView18PickerViewDelegate_")
@protocol PickerViewDelegate
- (void)singleColDidSelecte:(NSInteger)selectedIndex selectedValue:(NSString * _Nonnull)selectedValue;
- (void)multipleColsDidSelecte:(NSArray<NSNumber *> * _Nonnull)selectedIndexs selectedValues:(NSArray<NSString *> * _Nonnull)selectedValues;
- (void)dateDidSelecte:(NSDate * _Nonnull)selectedDate;
@end


SWIFT_CLASS("_TtC12CSPickerView17PickerViewManager")
@interface PickerViewManager : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end


@interface PickerViewManager (SWIFT_EXTENSION(CSPickerView))
/// 把self从window中移除
- (void)dimissWithCompletion:(void (^ _Nullable)(BOOL))completion;
@end



@interface PickerViewManager (SWIFT_EXTENSION(CSPickerView))
/// 多列不关联选择器
/// \param toolBarTitle 标题
///
/// \param data 数据；为空时，会弹出提示框提示数据为空
///
/// \param defaultSelectedIndexs 默认选中的每一列的行数；当默认索引不在合理范围内,会默认显示第一个，默认索引数组数量不做限制，已兼容
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showMultipleColsPicker:(NSString * _Nonnull)toolBarTitle data:(NSArray<NSArray<NSString *> *> * _Nonnull)data defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs cancelAction:(void (^ _Nullable)(void))cancelAction sureAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))sureAction;
/// 城市选择器
/// \param toolBarTitle 标题
///
/// \param type 显示样式类型
///
/// \param defaultSelectedValues 默认选中的每一列的值, 注意不是行数；当默认值不存在时,会默认显示第一个，默认数据数组数量不做限制，已兼容
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showCitiesPicker:(NSString * _Nonnull)toolBarTitle type:(enum CityPickStyle)type defaultSelectedValues:(NSArray<NSString *> * _Nullable)defaultSelectedValues cancelAction:(void (^ _Nullable)(void))cancelAction sureAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))sureAction;
/// 日期选择器
/// \param toolBarTitle 标题
///
/// \param datePickerSetting 可配置UIDatePicker的样式
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showDatePicker:(NSString * _Nonnull)toolBarTitle datePickerSetting:(DatePickerSetting * _Nonnull)datePickerSetting cancelAction:(void (^ _Nullable)(void))cancelAction sureAction:(void (^ _Nullable)(NSDate * _Nonnull))sureAction;
@end

@class NSBundle;

SWIFT_CLASS("_TtC12CSPickerView15PickerViewUtils")
@interface PickerViewUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nullable resoureBundle;)
+ (NSBundle * _Nullable)resoureBundle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable addressPlistPath;)
+ (NSString * _Nullable)addressPlistPath SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)localizedStringWithKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PickerViewUtils (SWIFT_EXTENSION(CSPickerView))
+ (NSString * _Nonnull)formatDateWithDate:(NSDate * _Nonnull)date formatStr:(NSString * _Nonnull)formatStr SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)toDateWithDateStr:(NSString * _Nullable)dateStr dateTypeStr:(NSString * _Nonnull)dateTypeStr SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12CSPickerView16SelectPickerView")
@interface SelectPickerView : UIView
/// 数据
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull titleArr;
/// 清空按钮闭包
@property (nonatomic, copy) void (^ _Nullable cancelAction)(void);
/// 确定按钮闭包,多选
@property (nonatomic, copy) void (^ _Nullable sureAction)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull);
/// 确定按钮闭包,单选
@property (nonatomic, copy) void (^ _Nullable singleSureAction)(NSInteger, NSString * _Nonnull);
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

@class UITableView;
@class UITableViewCell;

@interface SelectPickerView (SWIFT_EXTENSION(CSPickerView)) <UITableViewDataSource>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface SelectPickerView (SWIFT_EXTENSION(CSPickerView)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface SelectPickerView (SWIFT_EXTENSION(CSPickerView))
/// 展示多选view
/// \param title 标题
///
/// \param data 数据
///
/// \param defaultSelectedIndex 默认选中索引
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showViewWithTitle:(NSString * _Nonnull)title data:(NSArray<NSString *> * _Nonnull)data defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs cancelAction:(void (^ _Nonnull)(void))cancelAction sureAction:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))sureAction;
/// 获取多选view
/// \param title 标题
///
/// \param data 数据
///
/// \param defaultSelectedIndexs 默认选中索引,如果为nil，表示都不选中
///
///
/// returns:
/// SelectPickerView
+ (SelectPickerView * _Nullable)getViewWithTitle:(NSString * _Nonnull)title data:(NSArray<NSString *> * _Nonnull)data defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs SWIFT_WARN_UNUSED_RESULT;
/// 弹出框显示
- (void)showWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// 弹出框消失
- (void)dismissWithCompletion:(void (^ _Nullable)(BOOL))completion;
@end


SWIFT_CLASS("_TtC12CSPickerView11ToolBarView")
@interface ToolBarView : UIView
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) void (^ _Nullable sureAction)(void);
@property (nonatomic, copy) void (^ _Nullable cancelAction)(void);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7S__) && __ARM_ARCH_7S__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef CSPICKERVIEW_SWIFT_H
#define CSPICKERVIEW_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CSPickerView",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 城市选择样式
typedef SWIFT_ENUM(NSInteger, CityPickStyle, open) {
/// 省
  CityPickStyleProvince = 0,
/// 市
  CityPickStyleCity = 1,
/// 区
  CityPickStyleArea = 2,
};


/// 时间选择设置
SWIFT_CLASS("_TtC12CSPickerView17DatePickerSetting")
@interface DatePickerSetting : NSObject
/// 默认选中时间
@property (nonatomic, copy) NSDate * _Nonnull date;
/// 时间样式
@property (nonatomic) UIDatePickerMode dateMode;
/// 最小时间
@property (nonatomic, copy) NSDate * _Nullable minimumDate;
/// 最大时间
@property (nonatomic, copy) NSDate * _Nullable maximumDate;
/// 构造函数
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;
@class UIButton;
@class NSCoder;

/// 起止时间弹出框
SWIFT_CLASS("_TtC12CSPickerView22DurationDatePickerView")
@interface DurationDatePickerView : UIView
/// 选择日期是否可大于现在，默认true
@property (nonatomic) BOOL canGreatNow;
/// 选择日期是否可小于现在，默认true
@property (nonatomic) BOOL canLessNow;
/// 确定闭包
@property (nonatomic, copy) void (^ _Nullable sureBlock)(NSString * _Nonnull, NSString * _Nonnull);
/// 取消闭包
@property (nonatomic, copy) void (^ _Nullable cancelBlock)(void);
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
@property (nonatomic, strong) UIButton * _Nonnull startBtn;
@property (nonatomic, strong) UIButton * _Nonnull endBtn;
@property (nonatomic, strong) UIButton * _Nonnull cancelBtn;
@property (nonatomic, strong) UIButton * _Nonnull confirmBtn;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end


enum DurationDatePickerViewDateType : NSInteger;

@interface DurationDatePickerView (SWIFT_EXTENSION(CSPickerView))
/// 展示起止时间弹出框
/// \param startDate 开始时间
///
/// \param endDate 结束时间
///
/// \param dateType 时间类型
///
+ (DurationDatePickerView * _Nonnull)getPopupViewWithStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate dateType:(enum DurationDatePickerViewDateType)dateType SWIFT_WARN_UNUSED_RESULT;
/// 弹出框显示
- (void)showWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// 弹出框消失
- (void)dismissWithCompletion:(void (^ _Nullable)(BOOL))completion;
@end



/// 选择器样式
typedef SWIFT_ENUM(NSInteger, DurationDatePickerViewDateType, open) {
/// 年月日
  DurationDatePickerViewDateTypeYMD = 0,
/// 年月日时分
  DurationDatePickerViewDateTypeYMDHM = 1,
};

/// 选择器样式
typedef SWIFT_ENUM(NSInteger, PickerStyles, open) {
/// 单行
  PickerStylesSingle = 0,
/// 多行
  PickerStylesMultiple = 1,
/// 多行联动
  PickerStylesMultipleAssociated = 2,
/// 日期
  PickerStylesDate = 3,
};


SWIFT_CLASS("_TtC12CSPickerView10PickerView")
@interface PickerView : UIView
- (nonnull instancetype)initWithPickerStyle:(enum PickerStyles)pickerStyle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end



@interface PickerView (SWIFT_EXTENSION(CSPickerView))
/// 多列不关联
/// \param toolBarTitle 工具栏标题
///
/// \param multipleColsData 数据源 ~> [[String]]
///
/// \param defaultSelectedIndexs 默认选中索引
///
/// \param cancelAction 取消回调
///
/// \param doneAction 完成回调
///
///
/// returns:
/// PickerView
+ (PickerView * _Nonnull)multipleCosPicker:(NSString * _Nonnull)toolBarTitle multipleColsData:(NSArray<NSArray<NSString *> *> * _Nonnull)multipleColsData defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs cancelAction:(void (^ _Nullable)(void))cancelAction doneAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))doneAction SWIFT_WARN_UNUSED_RESULT;
/// 城市选择器
/// \param toolBarTitle 工具栏标题
///
/// \param defaultSelectedValues 默认选中值
///
/// \param cancelAction 取消回调
///
/// \param doneAction 完成回调
///
/// \param type 显示样式类型
///
///
/// returns:
/// PickerView
+ (PickerView * _Nonnull)citiesPicker:(NSString * _Nonnull)toolBarTitle type:(enum CityPickStyle)type defaultSelectedValues:(NSArray<NSString *> * _Nullable)defaultSelectedValues cancelAction:(void (^ _Nullable)(void))cancelAction doneAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))doneAction SWIFT_WARN_UNUSED_RESULT;
/// 时间选择器
/// \param toolBarTitle 工具栏标题
///
/// \param datePickerSetting date配置
///
/// \param cancelAction 取消回调
///
/// \param doneAction 完成回调
///
///
/// returns:
/// PickerView
+ (PickerView * _Nonnull)datePicker:(NSString * _Nonnull)toolBarTitle datePickerSetting:(DatePickerSetting * _Nonnull)datePickerSetting cancelAction:(void (^ _Nullable)(void))cancelAction doneAction:(void (^ _Nullable)(NSDate * _Nonnull))doneAction SWIFT_WARN_UNUSED_RESULT;
@end

@class UIPickerView;

@interface PickerView (SWIFT_EXTENSION(CSPickerView)) <UIPickerViewDataSource, UIPickerViewDelegate>
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
- (UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
@end

@class UIColor;
@class UIFont;

SWIFT_CLASS("_TtC12CSPickerView16PickerViewConfig")
@interface PickerViewConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PickerViewConfig * _Nonnull shared;)
+ (PickerViewConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 主背景色
@property (nonatomic, strong) UIColor * _Nonnull mainBackgroundColor;
/// 蒙版颜色
@property (nonatomic, strong) UIColor * _Nonnull maskColor;
/// 主文字颜色
@property (nonatomic, strong) UIColor * _Nonnull mainTextColor;
/// 左边按钮颜色
@property (nonatomic, strong) UIColor * _Nonnull leftButtonColor;
/// 左边按钮字体
@property (nonatomic, strong) UIFont * _Nonnull leftButtonFont;
/// 右边按钮颜色
@property (nonatomic, strong) UIColor * _Nonnull rightButtonColor;
/// 右边按钮字体
@property (nonatomic, strong) UIFont * _Nonnull rightButtonFont;
/// 中间标题颜色
@property (nonatomic, strong) UIColor * _Nonnull centerLabelColor;
/// 中间标题字体
@property (nonatomic, strong) UIFont * _Nonnull centerLabelFont;
/// Picker选项字体
@property (nonatomic, strong) UIFont * _Nonnull itemLabelFont;
/// Picker选项颜色
@property (nonatomic, strong) UIColor * _Nonnull itemLabelColor;
/// 顶部圆角
@property (nonatomic) CGFloat toolBarViewTopCornerRadius;
/// 分割线颜色
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// 强制使用某语言的编码
@property (nonatomic, copy) NSString * _Nullable languageCode;
/// 动画时长
@property (nonatomic) NSTimeInterval animateDuration;
@end



SWIFT_PROTOCOL("_TtP12CSPickerView18PickerViewDelegate_")
@protocol PickerViewDelegate
- (void)singleColDidSelecte:(NSInteger)selectedIndex selectedValue:(NSString * _Nonnull)selectedValue;
- (void)multipleColsDidSelecte:(NSArray<NSNumber *> * _Nonnull)selectedIndexs selectedValues:(NSArray<NSString *> * _Nonnull)selectedValues;
- (void)dateDidSelecte:(NSDate * _Nonnull)selectedDate;
@end


SWIFT_CLASS("_TtC12CSPickerView17PickerViewManager")
@interface PickerViewManager : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end


@interface PickerViewManager (SWIFT_EXTENSION(CSPickerView))
/// 把self从window中移除
- (void)dimissWithCompletion:(void (^ _Nullable)(BOOL))completion;
@end



@interface PickerViewManager (SWIFT_EXTENSION(CSPickerView))
/// 多列不关联选择器
/// \param toolBarTitle 标题
///
/// \param data 数据；为空时，会弹出提示框提示数据为空
///
/// \param defaultSelectedIndexs 默认选中的每一列的行数；当默认索引不在合理范围内,会默认显示第一个，默认索引数组数量不做限制，已兼容
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showMultipleColsPicker:(NSString * _Nonnull)toolBarTitle data:(NSArray<NSArray<NSString *> *> * _Nonnull)data defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs cancelAction:(void (^ _Nullable)(void))cancelAction sureAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))sureAction;
/// 城市选择器
/// \param toolBarTitle 标题
///
/// \param type 显示样式类型
///
/// \param defaultSelectedValues 默认选中的每一列的值, 注意不是行数；当默认值不存在时,会默认显示第一个，默认数据数组数量不做限制，已兼容
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showCitiesPicker:(NSString * _Nonnull)toolBarTitle type:(enum CityPickStyle)type defaultSelectedValues:(NSArray<NSString *> * _Nullable)defaultSelectedValues cancelAction:(void (^ _Nullable)(void))cancelAction sureAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))sureAction;
/// 日期选择器
/// \param toolBarTitle 标题
///
/// \param datePickerSetting 可配置UIDatePicker的样式
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showDatePicker:(NSString * _Nonnull)toolBarTitle datePickerSetting:(DatePickerSetting * _Nonnull)datePickerSetting cancelAction:(void (^ _Nullable)(void))cancelAction sureAction:(void (^ _Nullable)(NSDate * _Nonnull))sureAction;
@end

@class NSBundle;

SWIFT_CLASS("_TtC12CSPickerView15PickerViewUtils")
@interface PickerViewUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nullable resoureBundle;)
+ (NSBundle * _Nullable)resoureBundle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable addressPlistPath;)
+ (NSString * _Nullable)addressPlistPath SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)localizedStringWithKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PickerViewUtils (SWIFT_EXTENSION(CSPickerView))
+ (NSString * _Nonnull)formatDateWithDate:(NSDate * _Nonnull)date formatStr:(NSString * _Nonnull)formatStr SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)toDateWithDateStr:(NSString * _Nullable)dateStr dateTypeStr:(NSString * _Nonnull)dateTypeStr SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12CSPickerView16SelectPickerView")
@interface SelectPickerView : UIView
/// 数据
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull titleArr;
/// 清空按钮闭包
@property (nonatomic, copy) void (^ _Nullable cancelAction)(void);
/// 确定按钮闭包,多选
@property (nonatomic, copy) void (^ _Nullable sureAction)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull);
/// 确定按钮闭包,单选
@property (nonatomic, copy) void (^ _Nullable singleSureAction)(NSInteger, NSString * _Nonnull);
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

@class UITableView;
@class UITableViewCell;

@interface SelectPickerView (SWIFT_EXTENSION(CSPickerView)) <UITableViewDataSource>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface SelectPickerView (SWIFT_EXTENSION(CSPickerView)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface SelectPickerView (SWIFT_EXTENSION(CSPickerView))
/// 展示多选view
/// \param title 标题
///
/// \param data 数据
///
/// \param defaultSelectedIndex 默认选中索引
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showViewWithTitle:(NSString * _Nonnull)title data:(NSArray<NSString *> * _Nonnull)data defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs cancelAction:(void (^ _Nonnull)(void))cancelAction sureAction:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))sureAction;
/// 获取多选view
/// \param title 标题
///
/// \param data 数据
///
/// \param defaultSelectedIndexs 默认选中索引,如果为nil，表示都不选中
///
///
/// returns:
/// SelectPickerView
+ (SelectPickerView * _Nullable)getViewWithTitle:(NSString * _Nonnull)title data:(NSArray<NSString *> * _Nonnull)data defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs SWIFT_WARN_UNUSED_RESULT;
/// 弹出框显示
- (void)showWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// 弹出框消失
- (void)dismissWithCompletion:(void (^ _Nullable)(BOOL))completion;
@end


SWIFT_CLASS("_TtC12CSPickerView11ToolBarView")
@interface ToolBarView : UIView
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) void (^ _Nullable sureAction)(void);
@property (nonatomic, copy) void (^ _Nullable cancelAction)(void);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef CSPICKERVIEW_SWIFT_H
#define CSPICKERVIEW_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CSPickerView",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 城市选择样式
typedef SWIFT_ENUM(NSInteger, CityPickStyle, open) {
/// 省
  CityPickStyleProvince = 0,
/// 市
  CityPickStyleCity = 1,
/// 区
  CityPickStyleArea = 2,
};


/// 时间选择设置
SWIFT_CLASS("_TtC12CSPickerView17DatePickerSetting")
@interface DatePickerSetting : NSObject
/// 默认选中时间
@property (nonatomic, copy) NSDate * _Nonnull date;
/// 时间样式
@property (nonatomic) UIDatePickerMode dateMode;
/// 最小时间
@property (nonatomic, copy) NSDate * _Nullable minimumDate;
/// 最大时间
@property (nonatomic, copy) NSDate * _Nullable maximumDate;
/// 构造函数
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;
@class UIButton;
@class NSCoder;

/// 起止时间弹出框
SWIFT_CLASS("_TtC12CSPickerView22DurationDatePickerView")
@interface DurationDatePickerView : UIView
/// 选择日期是否可大于现在，默认true
@property (nonatomic) BOOL canGreatNow;
/// 选择日期是否可小于现在，默认true
@property (nonatomic) BOOL canLessNow;
/// 确定闭包
@property (nonatomic, copy) void (^ _Nullable sureBlock)(NSString * _Nonnull, NSString * _Nonnull);
/// 取消闭包
@property (nonatomic, copy) void (^ _Nullable cancelBlock)(void);
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
@property (nonatomic, strong) UIButton * _Nonnull startBtn;
@property (nonatomic, strong) UIButton * _Nonnull endBtn;
@property (nonatomic, strong) UIButton * _Nonnull cancelBtn;
@property (nonatomic, strong) UIButton * _Nonnull confirmBtn;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end


enum DurationDatePickerViewDateType : NSInteger;

@interface DurationDatePickerView (SWIFT_EXTENSION(CSPickerView))
/// 展示起止时间弹出框
/// \param startDate 开始时间
///
/// \param endDate 结束时间
///
/// \param dateType 时间类型
///
+ (DurationDatePickerView * _Nonnull)getPopupViewWithStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate dateType:(enum DurationDatePickerViewDateType)dateType SWIFT_WARN_UNUSED_RESULT;
/// 弹出框显示
- (void)showWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// 弹出框消失
- (void)dismissWithCompletion:(void (^ _Nullable)(BOOL))completion;
@end



/// 选择器样式
typedef SWIFT_ENUM(NSInteger, DurationDatePickerViewDateType, open) {
/// 年月日
  DurationDatePickerViewDateTypeYMD = 0,
/// 年月日时分
  DurationDatePickerViewDateTypeYMDHM = 1,
};

/// 选择器样式
typedef SWIFT_ENUM(NSInteger, PickerStyles, open) {
/// 单行
  PickerStylesSingle = 0,
/// 多行
  PickerStylesMultiple = 1,
/// 多行联动
  PickerStylesMultipleAssociated = 2,
/// 日期
  PickerStylesDate = 3,
};


SWIFT_CLASS("_TtC12CSPickerView10PickerView")
@interface PickerView : UIView
- (nonnull instancetype)initWithPickerStyle:(enum PickerStyles)pickerStyle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end



@interface PickerView (SWIFT_EXTENSION(CSPickerView))
/// 多列不关联
/// \param toolBarTitle 工具栏标题
///
/// \param multipleColsData 数据源 ~> [[String]]
///
/// \param defaultSelectedIndexs 默认选中索引
///
/// \param cancelAction 取消回调
///
/// \param doneAction 完成回调
///
///
/// returns:
/// PickerView
+ (PickerView * _Nonnull)multipleCosPicker:(NSString * _Nonnull)toolBarTitle multipleColsData:(NSArray<NSArray<NSString *> *> * _Nonnull)multipleColsData defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs cancelAction:(void (^ _Nullable)(void))cancelAction doneAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))doneAction SWIFT_WARN_UNUSED_RESULT;
/// 城市选择器
/// \param toolBarTitle 工具栏标题
///
/// \param defaultSelectedValues 默认选中值
///
/// \param cancelAction 取消回调
///
/// \param doneAction 完成回调
///
/// \param type 显示样式类型
///
///
/// returns:
/// PickerView
+ (PickerView * _Nonnull)citiesPicker:(NSString * _Nonnull)toolBarTitle type:(enum CityPickStyle)type defaultSelectedValues:(NSArray<NSString *> * _Nullable)defaultSelectedValues cancelAction:(void (^ _Nullable)(void))cancelAction doneAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))doneAction SWIFT_WARN_UNUSED_RESULT;
/// 时间选择器
/// \param toolBarTitle 工具栏标题
///
/// \param datePickerSetting date配置
///
/// \param cancelAction 取消回调
///
/// \param doneAction 完成回调
///
///
/// returns:
/// PickerView
+ (PickerView * _Nonnull)datePicker:(NSString * _Nonnull)toolBarTitle datePickerSetting:(DatePickerSetting * _Nonnull)datePickerSetting cancelAction:(void (^ _Nullable)(void))cancelAction doneAction:(void (^ _Nullable)(NSDate * _Nonnull))doneAction SWIFT_WARN_UNUSED_RESULT;
@end

@class UIPickerView;

@interface PickerView (SWIFT_EXTENSION(CSPickerView)) <UIPickerViewDataSource, UIPickerViewDelegate>
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
- (UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
@end

@class UIColor;
@class UIFont;

SWIFT_CLASS("_TtC12CSPickerView16PickerViewConfig")
@interface PickerViewConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PickerViewConfig * _Nonnull shared;)
+ (PickerViewConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 主背景色
@property (nonatomic, strong) UIColor * _Nonnull mainBackgroundColor;
/// 蒙版颜色
@property (nonatomic, strong) UIColor * _Nonnull maskColor;
/// 主文字颜色
@property (nonatomic, strong) UIColor * _Nonnull mainTextColor;
/// 左边按钮颜色
@property (nonatomic, strong) UIColor * _Nonnull leftButtonColor;
/// 左边按钮字体
@property (nonatomic, strong) UIFont * _Nonnull leftButtonFont;
/// 右边按钮颜色
@property (nonatomic, strong) UIColor * _Nonnull rightButtonColor;
/// 右边按钮字体
@property (nonatomic, strong) UIFont * _Nonnull rightButtonFont;
/// 中间标题颜色
@property (nonatomic, strong) UIColor * _Nonnull centerLabelColor;
/// 中间标题字体
@property (nonatomic, strong) UIFont * _Nonnull centerLabelFont;
/// Picker选项字体
@property (nonatomic, strong) UIFont * _Nonnull itemLabelFont;
/// Picker选项颜色
@property (nonatomic, strong) UIColor * _Nonnull itemLabelColor;
/// 顶部圆角
@property (nonatomic) CGFloat toolBarViewTopCornerRadius;
/// 分割线颜色
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// 强制使用某语言的编码
@property (nonatomic, copy) NSString * _Nullable languageCode;
/// 动画时长
@property (nonatomic) NSTimeInterval animateDuration;
@end



SWIFT_PROTOCOL("_TtP12CSPickerView18PickerViewDelegate_")
@protocol PickerViewDelegate
- (void)singleColDidSelecte:(NSInteger)selectedIndex selectedValue:(NSString * _Nonnull)selectedValue;
- (void)multipleColsDidSelecte:(NSArray<NSNumber *> * _Nonnull)selectedIndexs selectedValues:(NSArray<NSString *> * _Nonnull)selectedValues;
- (void)dateDidSelecte:(NSDate * _Nonnull)selectedDate;
@end


SWIFT_CLASS("_TtC12CSPickerView17PickerViewManager")
@interface PickerViewManager : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@end


@interface PickerViewManager (SWIFT_EXTENSION(CSPickerView))
/// 把self从window中移除
- (void)dimissWithCompletion:(void (^ _Nullable)(BOOL))completion;
@end



@interface PickerViewManager (SWIFT_EXTENSION(CSPickerView))
/// 多列不关联选择器
/// \param toolBarTitle 标题
///
/// \param data 数据；为空时，会弹出提示框提示数据为空
///
/// \param defaultSelectedIndexs 默认选中的每一列的行数；当默认索引不在合理范围内,会默认显示第一个，默认索引数组数量不做限制，已兼容
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showMultipleColsPicker:(NSString * _Nonnull)toolBarTitle data:(NSArray<NSArray<NSString *> *> * _Nonnull)data defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs cancelAction:(void (^ _Nullable)(void))cancelAction sureAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))sureAction;
/// 城市选择器
/// \param toolBarTitle 标题
///
/// \param type 显示样式类型
///
/// \param defaultSelectedValues 默认选中的每一列的值, 注意不是行数；当默认值不存在时,会默认显示第一个，默认数据数组数量不做限制，已兼容
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showCitiesPicker:(NSString * _Nonnull)toolBarTitle type:(enum CityPickStyle)type defaultSelectedValues:(NSArray<NSString *> * _Nullable)defaultSelectedValues cancelAction:(void (^ _Nullable)(void))cancelAction sureAction:(void (^ _Nullable)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))sureAction;
/// 日期选择器
/// \param toolBarTitle 标题
///
/// \param datePickerSetting 可配置UIDatePicker的样式
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showDatePicker:(NSString * _Nonnull)toolBarTitle datePickerSetting:(DatePickerSetting * _Nonnull)datePickerSetting cancelAction:(void (^ _Nullable)(void))cancelAction sureAction:(void (^ _Nullable)(NSDate * _Nonnull))sureAction;
@end

@class NSBundle;

SWIFT_CLASS("_TtC12CSPickerView15PickerViewUtils")
@interface PickerViewUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nullable resoureBundle;)
+ (NSBundle * _Nullable)resoureBundle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable addressPlistPath;)
+ (NSString * _Nullable)addressPlistPath SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)localizedStringWithKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PickerViewUtils (SWIFT_EXTENSION(CSPickerView))
+ (NSString * _Nonnull)formatDateWithDate:(NSDate * _Nonnull)date formatStr:(NSString * _Nonnull)formatStr SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)toDateWithDateStr:(NSString * _Nullable)dateStr dateTypeStr:(NSString * _Nonnull)dateTypeStr SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12CSPickerView16SelectPickerView")
@interface SelectPickerView : UIView
/// 数据
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull titleArr;
/// 清空按钮闭包
@property (nonatomic, copy) void (^ _Nullable cancelAction)(void);
/// 确定按钮闭包,多选
@property (nonatomic, copy) void (^ _Nullable sureAction)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull);
/// 确定按钮闭包,单选
@property (nonatomic, copy) void (^ _Nullable singleSureAction)(NSInteger, NSString * _Nonnull);
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

@class UITableView;
@class UITableViewCell;

@interface SelectPickerView (SWIFT_EXTENSION(CSPickerView)) <UITableViewDataSource>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface SelectPickerView (SWIFT_EXTENSION(CSPickerView)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface SelectPickerView (SWIFT_EXTENSION(CSPickerView))
/// 展示多选view
/// \param title 标题
///
/// \param data 数据
///
/// \param defaultSelectedIndex 默认选中索引
///
/// \param cancelAction 取消回调
///
/// \param sureAction 确定回调
///
+ (void)showViewWithTitle:(NSString * _Nonnull)title data:(NSArray<NSString *> * _Nonnull)data defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs cancelAction:(void (^ _Nonnull)(void))cancelAction sureAction:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nonnull, NSArray<NSString *> * _Nonnull))sureAction;
/// 获取多选view
/// \param title 标题
///
/// \param data 数据
///
/// \param defaultSelectedIndexs 默认选中索引,如果为nil，表示都不选中
///
///
/// returns:
/// SelectPickerView
+ (SelectPickerView * _Nullable)getViewWithTitle:(NSString * _Nonnull)title data:(NSArray<NSString *> * _Nonnull)data defaultSelectedIndexs:(NSArray<NSNumber *> * _Nullable)defaultSelectedIndexs SWIFT_WARN_UNUSED_RESULT;
/// 弹出框显示
- (void)showWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// 弹出框消失
- (void)dismissWithCompletion:(void (^ _Nullable)(BOOL))completion;
@end


SWIFT_CLASS("_TtC12CSPickerView11ToolBarView")
@interface ToolBarView : UIView
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) void (^ _Nullable sureAction)(void);
@property (nonatomic, copy) void (^ _Nullable cancelAction)(void);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
